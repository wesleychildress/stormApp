{"version":3,"sources":["../../src/services/esri-loader.service.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAA,EAAW,MAAA,eAAA,CAAA;AACpB,OAAO,EAAE,QAAA,EAAU,SAAA,EAAW,WAAA,EAAY,MAAA,aAAA,CAAA;AAC1C;IACA;IAGG,CAAA;IAFH;;OAEG;IACH,oCACG,GADH;QACI,MAAM,CACC,QAAA,EAAS,CAAE;IAApB,CAAC;IACH;;;OAGG;IACH,gCADG,GACH,UADG,OAAA;QAEC,MAAM,CADC,IAAI,OAAA,CAAQ,UAAC,OAAS,EAAU,MAAQ;YAE7C,kCAAkC;YAClC,EAAE,CAAC,CAAC,QADC,EAAQ,CAAE,CAAC,CAAA;gBAEd,OAAO,CADC,WAAC,CAAW,CAAC;YAEvB,CAAC;YACD,8BAA8B;YAC9B,SAAS,CADC,UAAC,GAAK;gBAEd,EAAE,CAAC,CAAC,GADC,CAAG,CAAC,CAAA;oBAEP,MAAM,CADC,GAAC,CAAG,CAAC;gBAEd,CAAC;gBADC,IAAA,CAAK,CAAA;oBAEL,OAAO,CADC,WAAC,CAAW,CAAC;gBAEvB,CAAC;YACH,CAAC,EADE,OAAA,CAAQ,CAAC;QAEd,CAAC,CADC,CAAC;IAEL,CAAC;IACH;;;OAGG;IACH,uCAHG,GAGH,UAHG,WAAA;QAIC,MAAM,CAHC,IAAI,OAAA,CAAQ,UAAC,OAAS;YAI3B,WAAW,CAHC,WAAC,EAAY;gBAAA,iBAAiB;qBAAjB,UAAiB,EAAjB,qBAAiB,EAAjB,IAAiB;oBAAjB,4BAAiB;;gBAIxC,OAAO,CAHC,OAAC,CAAO,CAAC;YAInB,CAAC,CAHC,CAAC;QAIL,CAAC,CAHC,CAAC;IAIL,CAAC;IACH;;;;OAIG;IACH,mCANG,GAMH,UANG,WAAA,EAAA,QAAA;QAOC,MAAM,CANC,WAAA,CAAY,WAAC,EAAY,QAAA,CAAS,CAAC;IAO5C,CAAC;IALI,4BAAA,GAAoC;QAO3C,EANE,IAAA,EAAM,UAAA,EAAW;KAOlB,CANC;IAOF;;OAEG;IAPF,gCAAA,GAAA,cAAA,OAAA,EASA,EATA,CASA,CAAC;IACF,wBAAC;CAvDD,AAuDC,IAAA;SArDA,iBAAA;AAuDD;IACA,gBAAgB;IAChB,iBAAiB,CAAC,UAAU,CAAC;IAC7B;;;OAGG;IACH,iBAAiB,CAAC,cAAc,CAAC;AACjC,CAAC","file":"esri-loader.service.js","sourceRoot":"","sourcesContent":["import { Injectable } from '@angular/core';\nimport { isLoaded, bootstrap, dojoRequire } from 'esri-loader';\nexport class EsriLoaderService {\nconstructor() { }\n/**\n * @return {?}\n */\nisLoaded() {\n    return isLoaded();\n  }\n/**\n * @param {?=} options\n * @return {?}\n */\nload(options?: Object): Promise<Function> {\n    return new Promise((resolve: Function, reject: Function) => {\n      // don't try to load a second time\n      if (isLoaded()) {\n        resolve(dojoRequire);\n      }\n      // wrap bootstrap in a promise\n      bootstrap((err: Error) => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve(dojoRequire);\n        }\n      }, options);\n    });\n  }\n/**\n * @param {?} moduleNames\n * @return {?}\n */\nloadModules(moduleNames: string[]): Promise<any[]> {\n    return new Promise((resolve: Function) => {\n      dojoRequire(moduleNames, (...modules: any[]) => {\n        resolve(modules);\n      });\n    });\n  }\n/**\n * @param {?} moduleNames\n * @param {?} callback\n * @return {?}\n */\nrequire(moduleNames: string[], callback: (...modules: any[]) => void) {\n    return dojoRequire(moduleNames, callback);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction EsriLoaderService_tsickle_Closure_declarations() {\n/** @type {?} */\nEsriLoaderService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nEsriLoaderService.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}