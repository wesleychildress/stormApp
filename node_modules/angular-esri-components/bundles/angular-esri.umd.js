(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common'), require('angular-esri-loader')) :
    typeof define === 'function' && define.amd ? define(['exports', '@angular/core', '@angular/common', 'angular-esri-loader'], factory) :
    (factory((global.ng = global.ng || {}, global.ng.angularEsri = global.ng.angularEsri || {}),global.ng.core,global.ng.common,global.angularEsriLoader));
}(this, (function (exports,_angular_core,_angular_common,angularEsriLoader) { 'use strict';

var EsriMapService$$1 = /** @class */ (function () {
    function EsriMapService$$1(moduleProvider) {
        this.moduleProvider = moduleProvider;
        this.isLoaded = new _angular_core.EventEmitter();
    }
    EsriMapService$$1.prototype.loadMap = function (mapProperties, mapViewProperties, mapEl) {
        var _this = this;
        return this.moduleProvider.require(['esri/Map', 'esri/views/MapView'])
            .then(function (_a) {
            var Map = _a[0], MapView = _a[1];
            // create map
            var map = new Map(mapProperties);
            // prepare properties that should be set locally
            // create a new object so as to not modify the provided object
            var newMapViewProps = _this.extend({}, mapViewProperties);
            if (!newMapViewProps.container) {
                newMapViewProps.container = mapEl.nativeElement.id;
            }
            if (!newMapViewProps.map) {
                newMapViewProps.map = map;
            }
            // create the MapView
            var mapView = new MapView(newMapViewProps);
            _this.map = map;
            _this.mapView = mapView;
            _this.isLoaded.emit();
            return {
                map: map,
                mapView: mapView
            };
        });
    };
    EsriMapService$$1.prototype.loadWebMap = function (webMapProperties, mapViewProperties, mapEl) {
        var _this = this;
        return this.moduleProvider.require(['esri/views/MapView', 'esri/WebMap'])
            .then(function (_a) {
            var MapView = _a[0], WebMap = _a[1];
            // create map
            var map = new WebMap(webMapProperties);
            // prepare properties that should be set locally
            // create a new object so as to not modify the provided object
            var newMapViewProps = _this.extend({}, mapViewProperties);
            if (!newMapViewProps.container) {
                newMapViewProps.container = mapEl.nativeElement.id;
            }
            if (!newMapViewProps.map) {
                newMapViewProps.map = map;
            }
            // create the MapView
            var mapView = new MapView(newMapViewProps);
            _this.map = map;
            _this.mapView = mapView;
            _this.isLoaded.emit();
            return {
                map: map,
                mapView: mapView
            };
        });
    };
    EsriMapService$$1.prototype.addWidget = function (element, position) {
        this.mapView.ui.add(element, position);
    };
    EsriMapService$$1.prototype.extend = function (obj, src) {
        Object.keys(src).forEach(function (key) { obj[key] = src[key]; });
        return obj;
    };
    EsriMapService$$1.decorators = [
        { type: _angular_core.Injectable },
    ];
    /** @nocollapse */
    EsriMapService$$1.ctorParameters = function () { return [
        { type: EsriModuleProvider, },
    ]; };
    return EsriMapService$$1;
}());

var environment = {
    production: true,
    arcGisScriptUrl: 'https://js.arcgis.com/4.6/',
    arcGisCssUrl: 'http://js.arcgis.com/4.6/esri/css/main.css'
};

var EsriModuleProvider = /** @class */ (function () {
    function EsriModuleProvider(esriLoader) {
        this.esriLoader = esriLoader;
    }
    EsriModuleProvider.prototype.require = function (moduleNames) {
        var _this = this;
        return this.esriLoader.load({
            // the specific version of the API that is to be used
            url: environment.arcGisScriptUrl
        }).then(function () {
            return _this.esriLoader.loadModules(moduleNames);
        });
    };
    EsriModuleProvider.decorators = [
        { type: _angular_core.Injectable },
    ];
    /** @nocollapse */
    EsriModuleProvider.ctorParameters = function () { return [
        { type: angularEsriLoader.EsriLoaderService, },
    ]; };
    return EsriModuleProvider;
}());

var EsriMapComponent = /** @class */ (function () {
    function EsriMapComponent(mapService) {
        this.mapService = mapService;
        this.mapViewProperties = {};
        this.mapInit = new _angular_core.EventEmitter();
    }
    EsriMapComponent.prototype.ngOnInit = function () {
        if (this.map) {
            // map is already initialized
            return;
        }
        this.loadMap();
    };
    EsriMapComponent.prototype.loadMap = function () {
        var _this = this;
        var mapPromise;
        // determine if loading a WebMap or creating a custom map
        if (this.mapProperties) {
            mapPromise = this.mapService.loadMap(this.mapProperties, this.mapViewProperties, this.mapEl);
        }
        else if (this.webMapProperties) {
            mapPromise = this.mapService.loadWebMap(this.webMapProperties, this.mapViewProperties, this.mapEl);
        }
        else {
            console.error('Proper map properties were not provided');
            return;
        }
        mapPromise.then(function (mapInfo) {
            _this.map = mapInfo.map;
            _this.mapView = mapInfo.mapView;
            // emit event informing application that the map has been loaded
            // emit event informing application that the map has been loaded
            _this.mapInit.emit({
                map: _this.map,
                mapView: _this.mapView
            });
            _this.mapInit.complete();
        });
    };
    EsriMapComponent.decorators = [
        { type: _angular_core.Component, args: [{
                    selector: 'esri-map',
                    template: "\n    <div class=\"map\" id=\"esri-map\" #map></div>\n  ",
                    styles: ["\n  /* Required CSS for the ArcGIS API for JavaScript */\n  @import '" + environment.arcGisCssUrl + "';\n\n  .map {\n    height: 100%;\n    width: 100%;\n    margin: 0;\n    padding: 0;\n  }\n    "]
                },] },
    ];
    /** @nocollapse */
    EsriMapComponent.ctorParameters = function () { return [
        { type: EsriMapService$$1, },
    ]; };
    EsriMapComponent.propDecorators = {
        "mapEl": [{ type: _angular_core.ViewChild, args: ['map',] },],
        "mapProperties": [{ type: _angular_core.Input },],
        "webMapProperties": [{ type: _angular_core.Input },],
        "mapViewProperties": [{ type: _angular_core.Input },],
        "mapInit": [{ type: _angular_core.Output },],
    };
    return EsriMapComponent;
}());

var CustomWidgetDirective = /** @class */ (function () {
    function CustomWidgetDirective(el, mapService) {
        this.mapService = mapService;
        this.el = el.nativeElement;
    }
    CustomWidgetDirective.prototype.ngOnInit = function () {
        var _this = this;
        this.mapService.isLoaded.subscribe(function () {
            // after map is loaded then add widget
            // after map is loaded then add widget
            _this.mapService.addWidget(_this.el, _this.position);
        });
    };
    CustomWidgetDirective.decorators = [
        { type: _angular_core.Directive, args: [{
                    selector: '[esri-customWidget]'
                },] },
    ];
    /** @nocollapse */
    CustomWidgetDirective.ctorParameters = function () { return [
        { type: _angular_core.ElementRef, },
        { type: EsriMapService$$1, },
    ]; };
    CustomWidgetDirective.propDecorators = {
        "position": [{ type: _angular_core.Input },],
    };
    return CustomWidgetDirective;
}());

var LayersToggleComponent = /** @class */ (function () {
    function LayersToggleComponent(mapService) {
        this.mapService = mapService;
    }
    LayersToggleComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.mapService.isLoaded.subscribe(function () {
            _this.map = _this.mapService.map;
            _this.mapView = _this.mapService.mapView;
        });
    };
    LayersToggleComponent.prototype.onCheck = function ($event, layer) {
        layer.visible = $event.target.checked;
    };
    LayersToggleComponent.prototype.onZoomLayer = function (layer) {
        this.mapView.goTo(layer.fullExtent);
    };
    LayersToggleComponent.decorators = [
        { type: _angular_core.Component, args: [{
                    selector: 'esri-layersToggle',
                    template: "\n    <div esri-customWidget [position]=\"position\">\n      <!-- Only display if there is a map and it has layers -->\n      <div *ngIf=\"map?.layers.length > 0\" class=\"esri-layers-toggle\">\n        <div *ngFor=\"let layer of map.layers.toArray()\">\n          <input type=\"checkbox\" [attr.checked]=\"layer.visible\" (click)=\"onCheck($event, layer)\" /> {{layer.title}}\n          <a href=\"javascript:void(0)\" (click)=\"onZoomLayer(layer)\">Zoom</a>\n        </div>\n      </div>\n    </div>\n  ",
                    styles: ["\n    .esri-layers-toggle {\n      z-index: 99;\n      background-color: white;\n      border-radius: 8px;\n      padding: 10px;\n      opacity: 0.75;\n    }\n  "]
                },] },
    ];
    /** @nocollapse */
    LayersToggleComponent.ctorParameters = function () { return [
        { type: EsriMapService$$1, },
    ]; };
    LayersToggleComponent.propDecorators = {
        "position": [{ type: _angular_core.Input },],
    };
    return LayersToggleComponent;
}());

var AngularEsriModule = /** @class */ (function () {
    function AngularEsriModule() {
    }
    AngularEsriModule.decorators = [
        { type: _angular_core.NgModule, args: [{
                    imports: [
                        _angular_common.CommonModule,
                        angularEsriLoader.EsriLoaderModule
                    ],
                    declarations: [
                        EsriMapComponent,
                        CustomWidgetDirective,
                        LayersToggleComponent
                    ],
                    exports: [
                        EsriMapComponent,
                        CustomWidgetDirective,
                        LayersToggleComponent
                    ],
                    providers: [
                        EsriMapService$$1,
                        EsriModuleProvider
                    ]
                },] },
    ];
    /** @nocollapse */
    AngularEsriModule.ctorParameters = function () { return []; };
    return AngularEsriModule;
}());

exports.AngularEsriModule = AngularEsriModule;
exports.EsriMapComponent = EsriMapComponent;
exports.EsriModuleProvider = EsriModuleProvider;

Object.defineProperty(exports, '__esModule', { value: true });

})));
