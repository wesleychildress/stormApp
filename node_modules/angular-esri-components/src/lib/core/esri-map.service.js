import { Injectable, EventEmitter } from '@angular/core';
import { EsriModuleProvider } from './index';
var EsriMapService = /** @class */ (function () {
    function EsriMapService(moduleProvider) {
        this.moduleProvider = moduleProvider;
        this.isLoaded = new EventEmitter();
    }
    EsriMapService.prototype.loadMap = function (mapProperties, mapViewProperties, mapEl) {
        var _this = this;
        return this.moduleProvider.require(['esri/Map', 'esri/views/MapView'])
            .then(function (_a) {
            var Map = _a[0], MapView = _a[1];
            // create map
            var map = new Map(mapProperties);
            // prepare properties that should be set locally
            // create a new object so as to not modify the provided object
            var newMapViewProps = _this.extend({}, mapViewProperties);
            if (!newMapViewProps.container) {
                newMapViewProps.container = mapEl.nativeElement.id;
            }
            if (!newMapViewProps.map) {
                newMapViewProps.map = map;
            }
            // create the MapView
            var mapView = new MapView(newMapViewProps);
            _this.map = map;
            _this.mapView = mapView;
            _this.isLoaded.emit();
            return {
                map: map,
                mapView: mapView
            };
        });
    };
    EsriMapService.prototype.loadWebMap = function (webMapProperties, mapViewProperties, mapEl) {
        var _this = this;
        return this.moduleProvider.require(['esri/views/MapView', 'esri/WebMap'])
            .then(function (_a) {
            var MapView = _a[0], WebMap = _a[1];
            // create map
            var map = new WebMap(webMapProperties);
            // prepare properties that should be set locally
            // create a new object so as to not modify the provided object
            var newMapViewProps = _this.extend({}, mapViewProperties);
            if (!newMapViewProps.container) {
                newMapViewProps.container = mapEl.nativeElement.id;
            }
            if (!newMapViewProps.map) {
                newMapViewProps.map = map;
            }
            // create the MapView
            var mapView = new MapView(newMapViewProps);
            _this.map = map;
            _this.mapView = mapView;
            _this.isLoaded.emit();
            return {
                map: map,
                mapView: mapView
            };
        });
    };
    EsriMapService.prototype.addWidget = function (element, position) {
        this.mapView.ui.add(element, position);
    };
    EsriMapService.prototype.extend = function (obj, src) {
        Object.keys(src).forEach(function (key) { obj[key] = src[key]; });
        return obj;
    };
    EsriMapService.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    EsriMapService.ctorParameters = function () { return [
        { type: EsriModuleProvider, },
    ]; };
    return EsriMapService;
}());
export { EsriMapService };
//# sourceMappingURL=esri-map.service.js.map