{"version":3,"file":"esri-module-provider.js","sourceRoot":"","sources":["esri-module-provider.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAA4B,MAAM,eAAe,CAAC;AACrE,OAAO,EAAE,iBAAiB,EAAE,MAAM,qBAAqB,CAAC;AACxD,OAAO,EAAE,WAAW,EAAE,MAAM,gCAAgC,CAAC;;IAI3D,4BAAoB,UAA6B;QAA7B,eAAU,GAAV,UAAU,CAAmB;KAAK;IAEtD,oCAAO,GAAP,UAAQ,WAAqB;QAA7B,iBAOC;QANC,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC;;YAExB,GAAG,EAAE,WAAW,CAAC,eAAe;SACjC,CAAC,CAAC,IAAI,CAAE;YACD,MAAM,CAAC,KAAI,CAAC,UAAU,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC;SACvD,CAAC,CAAC;KACN;;gBAXF,UAAU;;;;gBAHF,iBAAiB;;6BAD1B;;SAKa,kBAAkB","sourcesContent":["import { Injectable, ElementRef, EventEmitter } from '@angular/core';\r\nimport { EsriLoaderService } from 'angular-esri-loader';\r\nimport { environment } from '../../environments/environment';\r\n\r\n@Injectable()\r\nexport class EsriModuleProvider {\r\n  constructor(private esriLoader: EsriLoaderService) { }\r\n\r\n  require(moduleNames: string[]): Promise<any[]> {\r\n    return this.esriLoader.load({\r\n        // the specific version of the API that is to be used\r\n        url: environment.arcGisScriptUrl\r\n      }).then( () => {\r\n              return this.esriLoader.loadModules(moduleNames);\r\n      });\r\n  }\r\n}\r\n"]}